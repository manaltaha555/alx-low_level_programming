!<arch>
0-isupper.c/    0           0     0     644     222       `
#include<ctype.h>
#include"main.h"
/**
 *_isupper - check if the character is uppercase or not
 *@c: character to be checked
 *Return: 0 or 1
 */
int _isupper(int c)
{
	if (isupper(c))
		return (1);
	else
		return (0);

}
0-memset.c/     0           0     0     644     346       `
#include"main.h"
/**
 *_memset -  function that fills memory with a constant byte.
 *@s: the string to be filled
 *@b: character to be filled with
 *@n: number of characters to be filled with
 *Return: string
 *
 */
char *_memset(char *s, char b, unsigned int n)
{
	unsigned int i;

	for (i = 0; n > 0; i++, n--)
	{
		s[i] = b;
	}
	return (s);
}
0-strcat.c/     0           0     0     644     101       `
#include"main.h"
char *_strcat(char *dest, char *src)
{
	char * str = "hello world";
	return(str);
}

100-atoi.c/     0           0     0     644     52        `
#include"main.h"
int _atoi(char *s)
{
	return(1);
}
1-isdigit.c/    0           0     0     644     209       `
#include"main.h"
/**
 *_isdigit - check if the characer is digit or not
 *@c: character to be checked
 *Return: 0 or 1
 *
 */
int _isdigit(int c)
{
	if (c >= 48 && c <= 57)
		return (1);
	else
		return (0);
}

1-memcpy.c/     0           0     0     644     342       `
#include"main.h"
/**
 *_memcpy - copy a string into another string
 *@dest: string to be modified after copy
 *@src: the second  string to be copied
 *@n: number of bytes
 *Return: string
 *
 */
char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i;

	for (i = 0; n > 0; i++, n--)
	{
		dest[i] = src[i];
	}
	return (dest);
}
1-strncat.c/    0           0     0     644     367       `
#include"main.h"
/**
 *_strncat - to concanitate two strings
 *@dest: first strig
 *@src: second string
 *@n: number of bytes
 *Return: dest string
 */
char *_strncat(char *dest, char *src, int n)
{
	int size = 0, i;

	while (dest[size])
		size++; /*count the size of dest*/
	for (i = 0; i < n && src[i] != '\0'; i++)
	{
		dest[size++] = src[i];
	}
	return (dest);
}

2-strchr.c/     0           0     0     644     340       `
#include"main.h"
/**
 *_strchr -  return the first occurance of acharacter in string
 *@c: character to e checked
 *Return: a pointer to the first ocuurance of the cahracter
 *@s: is the string
 */
char *_strchr(char *s, char c)
{
	int i;

	for (i = 0; s[i] >= '\0'; i++)
	{
		if (s[i] == c)
		{
			return (s + i);
		}
	}
	return ('\0');
}
2-strlen.c/     0           0     0     644     202       `
#include <string.h>
#include"main.h"
/**
 *_strlen - returns the length of a string
 *@s: is a pointer to a string
 *Return: the length of a string
 *
 */
int _strlen(char *s)
{
	return (strlen(s));

}
2-strncpy.c/    0           0     0     644     104       `
#include"main.h"
char *_strncpy(char *dest, char *src, int n)
{
	char * str = "hello";
	return (str);
}
3-islower.c/    0           0     0     644     216       `
#include <ctype.h>
/**
 * _islower - check if the c is lowercase or uppercase
 * @c: parameter to printed
 * Return: 0 or 1
 */
int _islower(int c)
{
	if (islower(c))
	{
		return (1);
	}
	else
	{
		return (0);
	}

}
3-puts.c/       0           0     0     644     262       `
#include"main.h"
#include<string.h>
/**
 *_puts - prints a string, followed by a new line
 *@str: a pointer to a string
 *Return: void
 *
 */
void _puts(char *str)
{
	int i, a = strlen(str);

	for (i = 0; i < a; i++)
	{
		_putchar(str[i]);
	}
	_putchar('\n');
}
3-strcmp.c/     0           0     0     644     297       `
#include"main.h"
/**
 *_strcmp - compares the two string
 *@s1: first string
 *@s2: second string
 *Return: 0 or 1 or -1
 */
int _strcmp(char *s1, char *s2)
{
	int i = 0;

	while (s1[i] != '\0' && s2[i] != '\0')
	{
		if (s1[i] != s2[i])
		{
			return (s1[i] - s2[i]);
		}
		i++;
	}
	return (0);
}

3-strspn.c/     0           0     0     644     375       `
#include"main.h"
/**
 *_strspn - function that gets the length of a prefix substring
 *@s: the string
 *@accept: the prefix
 *Return: number of maching characters
 */
unsigned int _strspn(char *s, char *accept)
{
	unsigned int i, j;

	for (i = 0; s[i] != '\0'; i++)
	{
		for (j = 0; accept[j] != s[i]; j++)
		{
			if (accept[j] == '\0')
				return (i);
		}
	}
	return (i);
}

4-isalpha.c/    0           0     0     644     206       `
#include <ctype.h>
/**
*_isalpha - check if the c is lowercase or uppercase
*@c: parameter to printed
*Return: 0 or 1
*/
int _isalpha(int c)
{
	if (isalpha(c))
	{
	return (1);
	}
	else
	{
	return (0);
	}
}
4-strpbrk.c/    0           0     0     644     80        `
#include"main.h"
/**
 *
 *
 *
 *
 */
char *_strpbrk(char *s, char *accept)
{

}
5-strstr.c/     0           0     0     644     101       `
#include"main.h"
char *_strstr(char *haystack, char *needle)
{
	char *str ="hello";
	return (str);
}

6-abs.c/        0           0     0     644     196       `
#include"main.h"
/**
 *_abs - return the absolute value of an integer
 * @r: the integer number
 *
 * Return: always int
 */
int _abs(int r)
{
	if (r < 0)
		return (r * -1);
	else
		return (r);
}
9-strcpy.c/     0           0     0     644     294       `
#include"main.h"
/**
 *_strcpy - copies the string
 *@dest: string to be filled with another string
 *@src: string to be copied
 *Return: array of characters
 */
char *_strcpy(char *dest, char *src)
{
	int i = -1;

	do {
		i++;
		dest[i] = src[i];

	} while (src[i] != '\0');
	return (dest);
}
main.c/         0           0     0     644     148       `
#include "main.h"

int main(void)
{
    _puts("\"At the end of the day, my goal was to be the best hacker\"\n\t- Kevin Mitnick");
    return (0);
}
_putchar.c/     0           0     0     644     248       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

